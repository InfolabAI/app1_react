# Task ID: 6
# Title: 샘플링 결과 전송 기능 구현
# Status: pending
# Dependencies: 3, 5
# Priority: high
# Description: 클라이언트에서 생성된 샘플링 결과를 서버로 전송하는 기능을 구현합니다.
# Details:
1. API 통신 함수 추가
2. 샘플링 결과 데이터 포맷 정의
3. 전송 상태 관리 로직 구현
4. 에러 처리 및 재시도 메커니즘 추가

```typescript
// utils/api.ts에 추가
export const sendSamplingResult = async (appId: string, endDate: string, samplingResult: any) => {
  try {
    const response = await axios.post(`${API_BASE_URL}/summary`, {
      app_id: appId,
      end_date: endDate,
      sampled_reviews: samplingResult.sampledReviews,
      statistics: samplingResult.statistics
    });
    return response.data;
  } catch (error) {
    console.error('Error sending sampling result:', error);
    throw error;
  }
};

// screens/ReviewScreen.tsx의 handleRequestAISummary 함수 업데이트
const handleRequestAISummary = async () => {
  if (!samplingResult) return;
  
  setSubmitting(true);
  try {
    const summaryResponse = await sendSamplingResult(appId, endDate, samplingResult);
    setSummary(summaryResponse.summary);
    // 요약 결과 표시 로직
  } catch (error) {
    console.error('Error requesting AI summary:', error);
    // 에러 처리 및 사용자에게 알림
    setError('AI 요약을 생성하는 중 오류가 발생했습니다. 다시 시도해주세요.');
  } finally {
    setSubmitting(false);
  }
};
```

# Test Strategy:
1. 다양한 크기의 샘플링 결과 데이터로 전송 테스트
2. 네트워크 지연 및 오류 상황에서의 동작 테스트
3. 데이터 전송 중 UI 상태 변화 확인
4. 서버 응답 처리 로직 테스트
5. 재시도 메커니즘 동작 확인
6. 대용량 데이터 전송 시 성능 및 메모리 사용량 모니터링

# Subtasks:
## 1. 샘플링 결과 전송 기능 구현 [pending]
### Dependencies: None
### Description: 클라이언트에서 생성된 샘플링 결과를 서버로 전송하는 기본 기능을 구현합니다.
### Details:
1. 샘플링 데이터 포맷 정의 및 검증 로직 구현
2. API 엔드포인트 설계 및 구현
3. HTTP 요청 헤더 및 인증 메커니즘 설정
4. 데이터 직렬화 및 압축 방법 구현
5. 기본 전송 기능 테스트

## 2. 에러 처리 및 재시도 메커니즘 구현 [pending]
### Dependencies: 6.1
### Description: 네트워크 오류, 서버 오류 등 다양한 예외 상황에 대한 처리와 재시도 로직을 구현합니다.
### Details:
1. 발생 가능한 오류 유형 분류 (네트워크 오류, 서버 오류, 인증 오류 등)
2. 오류 유형별 적절한 처리 로직 구현
3. 지수 백오프 알고리즘을 활용한 재시도 메커니즘 구현
4. 최대 재시도 횟수 및 타임아웃 설정
5. 영구적 오류 발생 시 대체 저장 메커니즘 구현

## 3. 전송 상태 관리 및 사용자 피드백 구현 [pending]
### Dependencies: 6.1, 6.2
### Description: 샘플링 결과 전송 과정의 상태를 관리하고 사용자에게 적절한 피드백을 제공하는 기능을 구현합니다.
### Details:
1. 전송 상태 모델 설계 (대기 중, 전송 중, 완료, 실패 등)
2. 상태 변경에 따른 UI 업데이트 메커니즘 구현
3. 진행 상황 표시 기능 구현 (프로그레스 바 등)
4. 전송 완료/실패 시 사용자 알림 기능 구현
5. 백그라운드 전송 지원 및 앱 상태 변경 시 전송 상태 유지 방안 구현

