# Task ID: 5
# Title: ReviewScreen에 샘플링 기능 통합
# Status: pending
# Dependencies: 1, 3, 4
# Priority: high
# Description: 분리된 ReviewScreen에 샘플링 기능과 진행 상태 UI를 통합하고, 샘플링 완료 후 AI 요약 버튼을 활성화합니다.
# Details:
1. ReviewScreen에 샘플링 상태 관리 로직 추가
2. 샘플링 시작 버튼 및 진행 상태 표시 UI 통합
3. 샘플링 완료 시 AI 요약 버튼 활성화 로직 구현
4. 샘플링 결과 데이터 저장 및 관리

```typescript
// screens/ReviewScreen.tsx 업데이트 예시
import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet, ScrollView } from 'react-native';
import { fetchAppReviews } from '../utils/api';
import { sampleReviews } from '../services/sampling';
import SamplingProgress from '../components/SamplingProgress';

type ReviewScreenProps = {
  appId: string;
  endDate: string;
  // 기타 필요한 props
};

const ReviewScreen: React.FC<ReviewScreenProps> = ({ appId, endDate }) => {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(false);
  const [samplingInProgress, setSamplingInProgress] = useState(false);
  const [samplingProgress, setSamplingProgress] = useState({ total: 0, processed: 0, completed: false });
  const [samplingResult, setSamplingResult] = useState(null);
  
  useEffect(() => {
    // 리뷰 데이터 로드 로직
    const loadReviews = async () => {
      setLoading(true);
      try {
        const data = await fetchAppReviews(appId, endDate);
        setReviews(data.reviews);
      } catch (error) {
        console.error('Error loading reviews:', error);
        // 에러 처리
      } finally {
        setLoading(false);
      }
    };
    
    loadReviews();
  }, [appId, endDate]);
  
  const handleStartSampling = async () => {
    if (reviews.length === 0) return;
    
    setSamplingInProgress(true);
    setSamplingProgress({ total: reviews.length, processed: 0, completed: false });
    
    try {
      const result = await sampleReviews(reviews, (progress) => {
        setSamplingProgress(progress);
      });
      
      setSamplingResult(result);
    } catch (error) {
      console.error('Error during sampling:', error);
      // 에러 처리
    } finally {
      setSamplingInProgress(false);
    }
  };
  
  const handleRequestAISummary = async () => {
    if (!samplingResult) return;
    
    // 샘플링 결과를 서버로 전송하는 로직
    // ...
  };
  
  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>리뷰 분석</Text>
      
      {loading ? (
        <Text>리뷰 데이터 로딩 중...</Text>
      ) : (
        <>
          <Text>총 {reviews.length}개의 리뷰가 로드되었습니다.</Text>
          
          <Button 
            title="리뷰 샘플링 시작" 
            onPress={handleStartSampling} 
            disabled={samplingInProgress || reviews.length === 0}
          />
          
          {samplingInProgress && (
            <SamplingProgress 
              total={samplingProgress.total}
              processed={samplingProgress.processed}
              completed={samplingProgress.completed}
            />
          )}
          
          {samplingResult && (
            <View style={styles.resultContainer}>
              <Text style={styles.resultTitle}>샘플링 완료</Text>
              <Text>선택된 샘플: {samplingResult.sampledReviews.length}개</Text>
              <Text>평균 평점: {samplingResult.statistics.averageRating.toFixed(1)}</Text>
              
              <Button 
                title="AI 요약 보기" 
                onPress={handleRequestAISummary} 
                disabled={!samplingResult}
              />
            </View>
          )}
        </>
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  // 스타일 정의
});

export default ReviewScreen;
```

# Test Strategy:
1. 리뷰 데이터 로딩 기능 테스트
2. 샘플링 시작 및 진행 상태 업데이트 테스트
3. 샘플링 완료 후 결과 표시 및 AI 요약 버튼 활성화 확인
4. 다양한 크기의 리뷰 데이터셋으로 성능 테스트
5. 에러 상황 처리 테스트(네트워크 오류, 데이터 형식 오류 등)
6. 사용자 인터페이스 흐름 테스트

# Subtasks:
## 1. 상태 관리 구조 설계 및 구현 [pending]
### Dependencies: None
### Description: ReviewScreen에서 샘플링 기능을 위한 상태 관리 구조를 설계하고 구현합니다.
### Details:
1. 샘플링 관련 상태 변수 정의(진행 상태, 결과, 오류 등)
2. 리뷰 데이터와 샘플링 데이터 간의 관계 모델링
3. 상태 업데이트 함수 구현(샘플링 시작, 진행, 완료, 취소)
4. Redux/Context API를 활용한 전역 상태 관리 설정
5. 비동기 작업 처리를 위한 미들웨어 구성(redux-saga/thunk 등)

## 2. 샘플링 UI 컴포넌트 개발 및 통합 [pending]
### Dependencies: 5.1
### Description: 샘플링 기능을 위한 UI 컴포넌트를 개발하고 ReviewScreen에 통합합니다.
### Details:
1. 샘플링 옵션 선택 UI 컴포넌트 개발(비율, 방법 등)
2. 진행 상태 표시 컴포넌트 구현(프로그레스 바, 로딩 인디케이터)
3. 결과 표시 영역 디자인 및 구현
4. 기존 ReviewScreen 레이아웃에 샘플링 UI 통합
5. 반응형 디자인 적용 및 스타일링
6. 접근성 고려 및 적용

## 3. 데이터 흐름 및 API 연동 구현 [pending]
### Dependencies: 5.1
### Description: 샘플링 기능과 관련된 데이터 흐름을 구현하고 백엔드 API와 연동합니다.
### Details:
1. 샘플링 요청/응답 데이터 구조 정의
2. 백엔드 API 연동 함수 구현(샘플링 요청, 결과 조회)
3. 에러 핸들링 및 재시도 메커니즘 구현
4. 데이터 캐싱 전략 수립 및 구현
5. 대용량 데이터 처리를 위한 최적화(페이지네이션, 가상화 등)
6. 네트워크 상태 모니터링 및 오프라인 지원 고려

## 4. 사용자 상호작용 및 테스트 구현 [pending]
### Dependencies: 5.2, 5.3
### Description: 사용자 상호작용 흐름을 구현하고 통합 테스트를 수행합니다.
### Details:
1. 사용자 액션에 따른 이벤트 핸들러 구현(샘플링 시작, 취소, 저장 등)
2. 키보드 단축키 및 접근성 기능 구현
3. 사용자 피드백 메커니즘 추가(토스트, 알림 등)
4. 다양한 시나리오에 대한 단위 테스트 작성
5. 통합 테스트 및 E2E 테스트 구현
6. 성능 테스트 및 최적화(렌더링 성능, 메모리 사용량 등)
7. 사용자 테스트 및 피드백 수집/반영

