<context>
- tasks.json 은 한글로 작성해야 함

# 개요  
- React native app 및 lambda_function 수정
- 먼저 App.tsx 의 각 screen 을 다른 파일로 분리하고 App.tsx 에서 import 해서 사용할거야.
- 현재 앞으로 @AmazonLambda_crawlF/lambda_function.py 의 generate_and_save_summary 와 @AmazonLambda_crawlF/llm.py 의 sampling 기능을 @MyApp_RN_New/App.tsx 의 ReviewScreen 에서 하게 수정할거야. 
- 코드가 너무 길어지면 안되니까 App.tsx 말고 다른 파일에 함수를 만들고, App.tsx 에서 불러와서 쓰게 하자.  
- 수행이 끝나고 sampling 이 완료되어야 AI요약보기를 누를 수 있고, sampling 된 데이터를 lambda server 로 전송하는거야. 이를 받아서 @AmazonLambda_crawlF/lambda_function.py 에서는 이제 sampling 기능은 없애고, generate_and_save_summary 에서 get_summary_by_app_id_and_end_date 가 있으면 기존 summary 반환하고, 없으면 app 에서 받아온 sampling 된 review data 를 llm 으로 바로 보내는거야.
- 모듈 하나 단위로 작업하고, 옮기거나 수정이 완료되면 test 해서 정상작동하는지 확인하고 다음 단계로 넘어가야 해.

# 핵심 기능  
- 코드 리팩토링: App.tsx에서 각 화면을 분리하여 코드 가독성과 유지보수성 향상
- 클라이언트 측 샘플링: 리뷰 데이터 샘플링 기능을 서버에서 클라이언트로 이동
- 서버 최적화: Lambda 함수에서 샘플링 기능 제거 및 클라이언트에서 받은 샘플 데이터 처리
- 사용자 경험 개선: 샘플링이 완료된 후에만 AI 요약 기능 활성화

# 사용자 경험  
## 페르소나
- 앱 개발자: 자신의 앱 리뷰를 분석하여 사용자 피드백을 이해하고자 하는 개발자
- 마케팅 담당자: 앱 사용자 반응을 분석하여 마케팅 전략을 수립하는 전문가
- 제품 관리자: 앱 품질과 사용자 만족도를 모니터링하는 관리자

## 주요 사용자 흐름
1. 사용자가 앱에 로그인
2. 분석할 앱 선택 또는 검색
3. 앱의 리뷰 데이터 로드
4. 리뷰 데이터 샘플링 진행 (클라이언트 측)
5. 샘플링 완료 후 AI 요약 버튼 활성화
6. AI 요약 버튼 클릭 시 샘플링된 데이터를 서버로 전송
7. 서버에서 AI 요약 생성 후 결과 표시

## UI/UX 고려사항
- 샘플링 진행 중 로딩 표시기 제공
- 샘플링 진행 상태를 사용자에게 명확히 표시
- AI 요약 버튼은 샘플링 완료 전까지 비활성화
- 요약 결과는 읽기 쉬운 형식으로 표시
- 차트와 그래프를 통해 리뷰 데이터 시각화

</context>
<PRD>
# 기술 아키텍처  
## 시스템 구성 요소
- **React Native 앱 (프론트엔드)**
  - 사용자 인터페이스 및 인증 관리
  - 리뷰 데이터 샘플링 처리
  - API 통신 및 데이터 처리
  - 리뷰 분석 결과 시각화

- **AWS Lambda 함수 (백엔드)**
  - 리뷰 데이터 수집 및 저장
  - AI 요약 생성 및 관리
  - 클라이언트 요청 처리
  
- **DynamoDB (데이터베이스)**
  - 앱 정보 저장
  - 리뷰 데이터 관리
  - AI 요약 결과 캐싱

- **OpenAI API (외부 서비스)**
  - 리뷰 데이터 분석 및 요약 생성

## 데이터 모델
- **AppInfo 테이블**: 앱 기본 정보 저장
- **AppReview 테이블**: 개별 리뷰 데이터 저장
- **AppSummary 테이블**: 생성된 요약 결과 캐싱

## API 및 통합
- **클라이언트-서버 통신**: RESTful API
- **데이터 형식**: JSON
- **인증 방식**: Google 로그인 토큰
- **엔드포인트**:
  - `/app_info_read`: 앱 정보 조회
  - `/app_review_read`: 리뷰 데이터 조회
  - `/summary`: AI 요약 생성 및 조회
  - 기타 사용자 관리 및 데이터 처리 API

## 인프라 요구사항
- AWS Lambda 함수 실행 환경
- DynamoDB 데이터베이스
- OpenAI API 액세스를 위한 API 키
- 모바일 앱 배포 플랫폼 (Google Play Store)

# 개발 로드맵  
## MVP 요구사항
1. **코드 리팩토링**
   - App.tsx에서 각 화면 컴포넌트 분리
   - 리뷰 화면 분리 및 독립적인 파일로 구성
   - 공통 함수 및 유틸리티 모듈화

2. **클라이언트 측 샘플링 구현**
   - 리뷰 데이터 샘플링 로직 개발
   - 샘플링 진행 상태 표시 UI 구현
   - 샘플링 결과 데이터 구조 정의

3. **서버 측 변경 사항**
   - Lambda 함수에서 샘플링 기능 제거
   - 클라이언트에서 받은 샘플 데이터 처리 로직 구현
   - 요약 캐싱 및 조회 기능 최적화

4. **통합 및 테스트**
   - 클라이언트-서버 통신 테스트
   - 전체 기능 통합 테스트
   - 사용자 인터페이스 테스트

## 향후 개선사항
1. **성능 최적화**
   - 대용량 리뷰 처리 시 메모리 사용량 개선
   - API 응답 시간 최적화
   - 클라이언트 측 캐싱 구현

2. **사용자 경험 개선**
   - 고급 리뷰 필터링 옵션 추가
   - 리뷰 분석 결과의 더 다양한 시각화 제공
   - 사용자 지정 분석 기간 설정 기능

3. **AI 기능 강화**
   - 더 정교한 샘플링 알고리즘 적용
   - 리뷰 감정 분석 추가
   - 리뷰 카테고리 자동 분류

# 논리적 의존성 체인
1. **기반 작업 (첫 번째 단계)**
   - 코드 리팩토링 및 화면 분리
   - 기존 리뷰 데이터 로딩 및 표시 기능 확인
   - API 통신 로직 정비

2. **프론트엔드 구현 (두 번째 단계)**
   - 클라이언트 측 샘플링 로직 구현
   - 샘플링 진행 UI 개발
   - 사용자 인터페이스 업데이트

3. **백엔드 변경 (세 번째 단계)**
   - Lambda 함수 수정
   - 샘플 데이터 처리 로직 구현
   - 요약 생성 기능 최적화

4. **통합 및 마무리 (네 번째 단계)**
   - 클라이언트-서버 통합
   - 전체 기능 테스트
   - 버그 수정 및 최적화

# 위험 요소 및 완화 방안  
## 기술적 과제
- **대용량 데이터 처리**: 리뷰 데이터가 많을 경우 클라이언트 측 성능 저하 가능성
  - 완화 방안: 페이지네이션 구현 및 점진적 데이터 로딩

- **네트워크 지연**: 샘플링된 데이터 전송 시 지연 발생 가능성
  - 완화 방안: 데이터 압축 및 전송 최적화, 상태 표시기 제공

- **AI 모델 한계**: OpenAI API의 토큰 제한 및 처리 시간
  - 완화 방안: 요약 길이 제한 및 캐싱 메커니즘 강화

## 구축할 수 있는 MVP
- 코드 분리 및 리팩토링 완료
- 기본적인 클라이언트 측 샘플링 기능
- 서버 측 샘플 데이터 처리 기능
- 간단한 진행 상태 표시 UI

## 자원 제약 사항
- **개발 시간**: 모듈별 순차적 개발 및 테스트 필요
  - 완화 방안: 명확한 우선순위 설정 및 단계별 구현

- **서버 비용**: Lambda 함수 실행 및 DynamoDB 사용량 증가
  - 완화 방안: 효율적인 데이터 구조 및 캐싱 전략 수립

- **API 호출 제한**: OpenAI API 사용량 및 비용
  - 완화 방안: 요약 생성 횟수 제한 및 캐싱 강화

# 부록  
## 연구 결과
- React Native 성능 최적화 기법
- 효율적인 리뷰 데이터 샘플링 알고리즘
- OpenAI API를 활용한 텍스트 요약 기법

## 기술 명세
- **React Native 버전**: 최신 안정 버전 사용
- **Python 버전**: AWS Lambda 지원 버전 (3.8 이상)
- **DynamoDB 테이블 구조**: 
  - AppInfo, AppReview, AppSummary 테이블 스키마
  - 인덱스 및 쿼리 패턴
- **OpenAI API**: GPT 모델 및 파라미터 설정
</PRD>